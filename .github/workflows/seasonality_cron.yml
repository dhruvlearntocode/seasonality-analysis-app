# FILE: .github/workflows/seasonality_cron.yml
# This workflow is configured to run the sequential Python script reliably.

name: Calculate Daily Seasonality

on:
  # Runs at 1 AM UTC every day (after most market closes)
  schedule:
    - cron: '0 1 * * *'
  
  # Allows you to run this workflow manually from the Actions tab on GitHub for testing.
  workflow_dispatch:

jobs:
  calculate-and-commit:
    # This is the crucial permission grant that allows the Action to push code back to your repository.
    permissions:
      contents: write
    
    # This strategy tells GitHub to retry the entire job up to 2 times if it fails due to a transient error,
    # such as the "runner not acquired" issue.
    strategy:
      fail-fast: false
      matrix:
        run: [1]
    retries: 2

    # Use a standard, up-to-date virtual machine for the job.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code onto the runner.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Step 3: Install the required Python libraries.
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yfinance pandas numpy

      # Step 4: Execute your Python script.
      - name: Run Seasonality Calculation Script
        run: python worker/calculate_seasonality.py

      # Step 5: Commit and push the results file if it has changed.
      - name: Commit and push if changed
        run: |
          # Configure git with a bot user name and email to make the commit.
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Pull any changes that might have occurred while the script was running.
          # This prevents the "Updates were rejected because the remote contains work that you do not have locally" error.
          git pull
          
          # Add the specific output file to the git staging area.
          git add public/scan_results.json
          
          # Check if the file has actually changed. If not, this command does nothing.
          # If it has changed, it creates a commit with the specified message.
          git diff --staged --quiet || git commit -m "Update daily seasonality scan results"
          
          # Push the commit back to your main branch.
          git push
